using Microsoft.Cci;
using Microsoft.Cci.MutableCodeModel;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using System;
using System.Console;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace MiniC.Compiler
{
  type Op = OperationCode;

  class DotNetBackend : IDisposable
  {
    _project           : Project;
    _context           : MiniCDependentPropertyEvalContext;
    _nameTable         : NameTable = NameTable();
    _host              : PeReader.DefaultHost = PeReader.DefaultHost(_nameTable);
    _rootUnitNamespace : RootUnitNamespace;
    _assembly          : Assembly;
    _mainClass         : NamespaceTypeDefinition;
    _coreAssembly      : IAssembly;
    _globalVarMap      : Dictionary[VarDeclarationSymbol, IFieldDefinition] = Dictionary();
    _functionMap       : Hashtable[FunDeclarationSymbol, IMethodDefinition] = Hashtable();

    public static GenerateAssembly(project : Project, outputPath : string) : void
    {
      
      def (context, rootSymbol) = project.Data :> ProjectData;

      using (backend = DotNetBackend(project))
      {
        foreach (symbols in rootSymbol.MemberTable.Symbols)
          foreach (topDeclSymbol in symbols)
          {
            | funcDecl is FunDeclarationSymbol => backend.Add(funcDecl)
            | varDecl is VarDeclarationSymbol  => backend.Add(varDecl)
            | s when ReferenceEquals(s, context.Void)
                  || ReferenceEquals(s, context.Bool)
                  || ReferenceEquals(s, context.Int)
                  || ReferenceEquals(s, context.Float) => ()
            | _ => assert(false, $"Unknown top declaration symbol type $topDeclSymbol");
          }
        backend.GenerateAssembly(outputPath);
      }
    }

    public this(project : Project)
    {
      _project = project;
      (_context, _) = project.Data :> ProjectData;
      _coreAssembly = _host.LoadAssembly(_host.CoreAssemblySymbolicIdentity);

      _assembly = Assembly() <-
      {
        Name = _nameTable.GetNameFor("hello");
        ModuleName = _nameTable.GetNameFor("hello.exe");
        PlatformType = _host.PlatformType;
        Kind = ModuleKind.ConsoleApplication;
        RequiresStartupStub = _host.PointerSize == 4;
        TargetRuntimeVersion = _coreAssembly.TargetRuntimeVersion
      };

      _assembly.AssemblyReferences.Add(_coreAssembly);
      _rootUnitNamespace          = RootUnitNamespace() <- { Unit = _assembly };
      _assembly.UnitNamespaceRoot = _rootUnitNamespace;

      def moduleClass = NamespaceTypeDefinition() <-
      {
        ContainingUnitNamespace = _rootUnitNamespace;
        InternFactory           = _host.InternFactory;
        IsClass                 = true;
        Name                    = _nameTable.GetNameFor("<Module>")
      };

      _assembly.AllTypes.Add(moduleClass);

      _mainClass = NamespaceTypeDefinition() <-
      {
        ContainingUnitNamespace = _rootUnitNamespace;
        InternFactory           = _host.InternFactory;
        IsClass                 = true;
        IsPublic                = true;
        IsStatic                = true;
        Fields                  = List();
        Methods                 = List();
        Name                    = _nameTable.GetNameFor("Main");
        BaseClasses             = List([_host.PlatformType.SystemObject]);
      };
      _rootUnitNamespace.Members.Add(_mainClass);
      _assembly.AllTypes.Add(_mainClass);
    }

    GenerateAssembly(outputPath : string) : void
    {
      def outputPath =
        if (string.IsNullOrWhiteSpace(outputPath))
          if (_project.Files.IsEmpty())
            Path.Combine(_project.ProjectDir, "out.exe")
          else
            Path.ChangeExtension(_project.Files.First().FullName, ".exe")
        else
          outputPath;

      using (peStream = IO.File.Create(outputPath))
        PeWriter.WritePeToStream(_assembly, _host, peStream);
    }

    public Add(var : VarDeclarationSymbol) : void
    {
      def field = FieldDefinition() <- {
        ContainingTypeDefinition = _mainClass;
        Name                     = _nameTable.GetNameFor(var.Name);
        Type                     = GetVariableType(var);
        IsStatic                 = true;
        Visibility               = TypeMemberVisibility.Public;
        IsReadOnly               = false;
        InternFactory            = _host.InternFactory;
      };

      _mainClass.Fields.Add(field);
      _globalVarMap[var] = field
    }

    public Add(func : FunDeclarationSymbol) : void
    {
      if (func.HasParsedDeclarations)
      {
        def name = func.Name;
        def method = MethodDefinition() <-
        {
          ContainingTypeDefinition = _mainClass;
          InternFactory            = _host.InternFactory;
          IsCil                    = true;
          IsStatic                 = true;
          Name                     = _nameTable.GetNameFor(name);
          Type                     = GetType(func.ReturnType);
          Parameters               = List();
          Visibility               = TypeMemberVisibility.Public;
          InternFactory            = _host.InternFactory;
        };

        _functionMap[func] = method;
        _mainClass.Methods.Add(method);
        method.Body = EmitFunctionBody(func, method);

        when (name.Equals("main", StringComparison.InvariantCultureIgnoreCase))
          _assembly.EntryPoint = method;

      }
      else
      {
        def writeLineFun(returnType)
        {
          def systemConsole = UnitHelper.FindType(_nameTable, _coreAssembly, "System.Console");
          TypeHelper.GetMethod(systemConsole, _nameTable.GetNameFor("WriteLine"), returnType);
        }

        _functionMap[func] = writeLineFun(GetType(func.Parameters[0].Type));
      }
    }

    GetFunction(symbol : FunDeclarationSymbol) : IMethodDefinition
    {
      if (_functionMap.Get(symbol) is Some(result))
        result
      else
        throw Exception($"Cannot find function $symbol, known functions: $(_functionMap.Values.ToArray().ToNList())")
    }

    EmitFunctionBody(func : FunDeclarationSymbol, method : MethodDefinition) : IMethodBody
    {
      def compoundStatement = func.Declarations.First().Body;
      def isVoid            = ReferenceEquals(method.Type, _host.PlatformType.SystemVoid);
      def methodContext     = MethodContext(this, _nameTable, method, isVoid, ILGenerator(_host, method));

      foreach (parameter in func.Parameters)
        methodContext.AddParameter(parameter);

      EmitCompoundStatement(methodContext, compoundStatement);
      methodContext.EmitReturn();
      ILGeneratorMethodBody(methodContext.IlGenerator, true, 10, method, methodContext.LocalVars, []);
    }

    EmitCompoundStatement(methodContext : MethodContext, compoundStatement : CompoundStatement) : void
    {
      def gen = methodContext.IlGenerator;
      gen.BeginScope();

      foreach (variable in compoundStatement.LocalVariables)
        methodContext.AddLocalVar(variable.Symbol);

      foreach (statement in compoundStatement.Statements)
        EmitStatement(methodContext, statement);

      gen.EndScope();
    }

    EmitStatement(methodContext : MethodContext, statement : Statement): void
    {
      def gen = methodContext.IlGenerator;

      match (statement)
      {
        | Expression as s => EmitExpression(methodContext, s.Body);
        | ReturnVoid => gen.Emit(Op.Ret);

        | Return as s =>
            EmitExpression(methodContext, s.Value);
            when (methodContext.Return is Some(ret))
            {
              gen.Emit(Op.Stloc, ret.Var);
              gen.Emit(Op.Br, ret.Label);
            }

        | Compound as s => EmitCompoundStatement(methodContext, s.Nested);
        | If as s =>
            def exitLabel = ILGeneratorLabel();
            EmitExpression(methodContext, s.Condition);
            gen.Emit(Op.Brfalse, exitLabel);
            // if true
            EmitStatement(methodContext, s.Body);
            gen.MarkLabel(exitLabel);

        | IfElse as s =>
            def falseBranchLabel = ILGeneratorLabel();
            def exitLabel        = ILGeneratorLabel();
            EmitExpression(methodContext, s.Condition);
            gen.Emit(Op.Brfalse, falseBranchLabel);
            // true branch
            EmitStatement(methodContext, s.TrueBranch);
            gen.Emit(Op.Br, exitLabel);
            // false branch
            gen.MarkLabel(falseBranchLabel);
            EmitStatement(methodContext, s.FalseBranch);
            gen.MarkLabel(exitLabel);

        | While as w =>
            def bodyLabel      = ILGeneratorLabel();
            def conditionLabel = ILGeneratorLabel();
            gen.Emit(Op.Br, conditionLabel);
            // loop body
            gen.MarkLabel(bodyLabel);
            EmitStatement(methodContext, w.Body);
            // loop condition
            gen.MarkLabel(conditionLabel);
            EmitExpression(methodContext, w.Condition);
            gen.Emit(Op.Brtrue, bodyLabel);
            methodContext.TryFindWhileExitLabel(w).Iter(gen.MarkLabel);

        | Break (Loop = Some(loop)) =>
            def whileExitLabel = methodContext.GetOrNewWhileExitLabel(loop);
            gen.Emit(Op.Br, whileExitLabel);

        | _ => WriteLine($"Unhandlend statement! $statement");
      }
    }

    EmitExpression(methodContext : MethodContext, expr : Expr) : void
    {
      def gen = methodContext.IlGenerator;

      match (expr)
      {
        | IntegerLiteral as e => gen.Emit(Op.Ldc_I4, e.Value.Value)
        | FloatLiteral   as e => gen.Emit(Op.Ldc_R8, e.Value.Value)
        | TrueLiteral         => gen.Emit(Op.Ldc_I4_1)
        | FalseLiteral        => gen.Emit(Op.Ldc_I4_0)
        | VariableRef    as e => LoadVar(gen, methodContext, e.Ref.Symbol)
        | ScalarAssignment as assignment =>
            EmitExpression(methodContext, assignment.Value);
            SetVarValue(gen, methodContext, assignment.Ref.Symbol);

        | FunCall as call =>
            foreach (arg in call.Arguments)
              EmitExpression(methodContext, arg);

            gen.Emit(Op.Call, GetFunction(call.Ref.Symbol))

        | Argument as arg => EmitExpression(methodContext, arg.Expr)
        | Binary as bin =>
            EmitExpression(methodContext, bin.Expr1);
            EmitExpression(methodContext, bin.Expr2);
            def opCode =
              match (bin)
              {
                | Or        => Op.Or
                | And       => Op.And
                | Equal     => Op.Ceq
                | NotEqual  =>
                    gen.Emit(Op.Ceq);
                    gen.Emit(Op.Ldc_I4_0);
                    Op.Ceq;

                | LessEqual =>
                    gen.Emit(Op.Cgt);
                    gen.Emit(Op.Ldc_I4_0);
                    Op.Ceq

                | Less         => Op.Clt
                | GreaterEqual =>
                    gen.Emit(Op.Clt);
                    gen.Emit(Op.Ldc_I4_0);
                    Op.Ceq

                | Greater  => Op.Cgt
                | Sum      => Op.Add
                | Sub      => Op.Sub
                | Modulus  => Op.Rem
                | Multiply => Op.Mul
                | Divide   => Op.Div
                | _ => assert(false, $"Unhandled binary expression $bin")
              };
            gen.Emit(opCode);

        | Unary as unary =>
            EmitExpression(methodContext, unary.Expr1);
            match (unary)
            {
              | Minus => gen.Emit(Op.Neg)
              | LogicalNegate =>
                  gen.Emit(Op.Ldc_I4_0);
                  gen.Emit(Op.Ceq)
              | _ => assert(false, $"Unhandled unary expression $unary")
            }

        | ArraySize as e =>
            LoadVar(gen, methodContext, e.Ref.Symbol);
            gen.Emit(Op.Ldlen);

        | ArrayAllocation as a =>
            EmitExpression(methodContext, a.Size);
            gen.Emit(Op.Newarr, GetArrayType(a.Type));

        | ArrayAssignment as a =>
            LoadVar(gen, methodContext, a.Ref.Symbol);
            EmitExpression(methodContext, a.Index);
            EmitExpression(methodContext, a.Value);
            gen.Emit(Op.Stelem, GetType(a.Ref.Symbol.Type));

        | ArrayRef as a =>
            LoadVar(gen, methodContext, a.Ref.Symbol);
            EmitExpression(methodContext, a.Index);
            gen.Emit(Op.Ldelem, GetType(a.Type));

        | _ => WriteLine($"Unhandled expression! $expr")
      }

      // we must pop expression result out from stack if it's not used
      unless (expr.Used || MiniCTypeUnifier.Instance.TryUnify(expr.Type, _context.Void))
        gen.Emit(Op.Pop);
    }

    LoadVar(gen : ILGenerator, context : MethodContext, symbol : VarDeclarationSymbol) : void
    {
      match (symbol.VarKind)
      {
        | Global    => gen.Emit(Op.Ldsfld, _globalVarMap[symbol])
        | Local     => gen.Emit(Op.Ldloc, context.GetCciLocalVar(symbol))
        | Parameter => gen.Emit(Op.Ldarg, context.GetCciParameter(symbol))
      }
    }

    SetVarValue(gen : ILGenerator, context : MethodContext, symbol : VarDeclarationSymbol) : void
    {
      match (symbol.VarKind)
      {
        | Global    => gen.Emit(Op.Stsfld, _globalVarMap[symbol])
        | Local     => gen.Emit(Op.Stloc, context.GetCciLocalVar(symbol))
        | Parameter => gen.Emit(Op.Starg, context.GetCciParameter(symbol))
      }
    }

    public GetType(typeSymbol : TypeSymbol) : ITypeReference
    {
      | IntSymbol   => _host.PlatformType.SystemInt32
      | FloatSymbol => _host.PlatformType.SystemFloat64
      | BoolSymbol  => _host.PlatformType.SystemBoolean
      | VoidSymbol  => _host.PlatformType.SystemVoid
      | _           => assert(false, $"Unhandled $typeSymbol")
    }

    GetArrayType(typeSymbol : TypeSymbol) : IArrayTypeReference
    {
      VectorTypeReference() <-
      {
        TypeCode      = PrimitiveTypeCode.NotPrimitive;
        PlatformType  = _host.PlatformType;
        ElementType   = GetType(typeSymbol);
        InternFactory = _host.InternFactory;
      }
    }

    public GetVariableType(var : VarDeclarationSymbol) : ITypeReference
    {
      | VarDeclaration.ScalarDeclarationSymbol => GetType(var.Type)
      | VarDeclaration.ArrayDeclarationSymbol  => GetArrayType(var.Type)
      | _ => assert(false)
    }

    public Dispose(): void
    {
      _host.Dispose()
    }
  }
}